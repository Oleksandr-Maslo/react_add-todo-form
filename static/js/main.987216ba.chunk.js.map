{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","userId","getUserByID","usersFromServer","find","findMaxId","maxId","forEach","App","useState","setId","setTitle","todosFromServer","setTodos","error","setError","action","method","onSubmit","event","preventDefault","newTodo","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.987216ba.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo = ({ user }: Props) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo = ({ todo }: Props) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo', todo.completed\n          ? 'TodoInfo--completed'\n          : '',\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList = ({ todos }: Props) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './types/Todo';\n\nconst getUserByID = (id: number) => {\n  const foundUser = usersFromServer.find(user => user.id === id);\n\n  return foundUser || null;\n};\n\nconst findMaxId = (todos: Todo[]) => {\n  let maxId = 0;\n\n  todos.forEach((todo) => {\n    if (todo.id > maxId) {\n      maxId = todo.id;\n    }\n  });\n\n  return maxId + 1;\n};\n\nexport const App = () => {\n  const [id, setId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState(todosFromServer.map(todo => ({\n    ...todo,\n    user: getUserByID(todo.userId),\n  })));\n  const [error, setError] = useState({ title: false, user: false });\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          if (!id || !title) {\n            setError({\n              title: !title,\n              user: !id,\n            });\n\n            return;\n          }\n\n          const newTodo = {\n            id: findMaxId(todos),\n            title,\n            completed: false,\n            userId: id,\n            user: getUserByID(id),\n          };\n\n          setTodos([...todos, newTodo]);\n          setTitle('');\n          setId(0);\n          setError({ title: false, user: false });\n        }}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            name=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setError({ ...error, title: false });\n            }}\n          />\n\n          {(error.title) && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            id=\"userSelect\"\n            data-cy=\"userSelect\"\n            value={id}\n            onChange={(event) => {\n              setId(+event.target.value);\n              setError({ ...error, user: event.target.value === '0' });\n            }}\n          >\n            <option\n              value={0}\n              disabled\n            >\n              Choose a user\n            </option>\n\n            {usersFromServer.map((user) => (\n              <option\n                key={user.id}\n                value={user.id}\n\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {(error.user) && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}