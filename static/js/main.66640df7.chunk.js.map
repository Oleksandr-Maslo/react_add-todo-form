{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","classNames","completed","TodoList","todos","map","username","userId","getUserByID","usersFromServer","find","findMaxId","ids","Math","max","App","useState","setId","setTitle","todosFromServer","setTodos","error","setError","action","method","onSubmit","event","preventDefault","trimmedTitle","trim","newTodo","htmlFor","type","placeholder","value","onChange","target","prevState","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66640df7.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo = ({ user }: Props) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo = ({ todo }: Props) => {\n  const {\n    id,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        classNames(['TodoInfo', todo.completed && 'TodoInfo--completed'])\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList = ({ todos }: Props) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { ChangeEvent, useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './types/Todo';\n\nconst getUserByID = (id: number) => {\n  const foundUser = usersFromServer.find(user => user.id === id);\n\n  return foundUser || null;\n};\n\nconst findMaxId = (todos: Todo[]) => {\n  const ids = todos.map(todo => todo.id);\n\n  return Math.max(...ids) + 1;\n};\n\nexport const App = () => {\n  const [id, setId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState(todosFromServer.map(todo => ({\n    ...todo,\n    user: getUserByID(todo.userId),\n  })));\n  const [error, setError] = useState({ title: false, user: false });\n\n  const addNewTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const trimmedTitle = title.trim();\n\n    if (!id || !trimmedTitle) {\n      setError({\n        title: !trimmedTitle,\n        user: !id,\n      });\n\n      return;\n    }\n\n    const newTodo = {\n      id: findMaxId(todos),\n      title: trimmedTitle,\n      completed: false,\n      userId: id,\n      user: getUserByID(id),\n    };\n\n    setTodos([...todos, newTodo]);\n    setTitle('');\n    setId(0);\n    setError({ title: false, user: false });\n  };\n\n  const handleTitleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setError((prevState) => ({ ...prevState, title: false }));\n  };\n\n  const handleIdChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setId(+event.target.value);\n    setError((prevState) => (\n      { ...prevState, user: event.target.value === '0' }\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={addNewTodo}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            name=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n\n          {(error.title) && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            id=\"userSelect\"\n            data-cy=\"userSelect\"\n            value={id}\n            onChange={handleIdChange}\n          >\n            <option\n              value={0}\n              disabled\n            >\n              Choose a user\n            </option>\n\n            {usersFromServer.map((user) => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {(error.user) && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}